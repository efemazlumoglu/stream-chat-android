apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.hiya.jacoco-android'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'de.mannodermaus.android-junit5'
apply plugin: 'org.jlleitschuh.gradle.ktlint'

group = 'com.github.GetStream'

def DEFAULT_COMPILE_SDK_VERSION = 29
def DEFAULT_TARGET_SDK_VERSION = 29
def DEFAULT_MIN_SDK_VERSION = 21

def DEFAULT_API_ENDPOINT = 'chat-us-east-1.stream-io-api.com'
def DEFAULT_API_KEEP_ALIVE_TIMEOUT = 1000 * 45
def DEFAULT_API_TIMEOUT = 1000 * 6
def DEFAULT_CDN_TIMEOUT = 1000 * 6

android {
    compileSdkVersion rootProject.hasProperty('compileSdkVersion') ? rootProject.compileSdkVersion : DEFAULT_COMPILE_SDK_VERSION

    defaultConfig {

        versionName "4.2.11-beta-8"

        buildConfigField "String", "DEFAULT_API_ENDPOINT", "\"$DEFAULT_API_ENDPOINT\""
        buildConfigField "int", "DEFAULT_API_TIMEOUT", "$DEFAULT_API_TIMEOUT"
        buildConfigField "int", "DEFAULT_CDN_TIMEOUT", "$DEFAULT_CDN_TIMEOUT"
        buildConfigField "int", "DEFAULT_API_KEEP_ALIVE_TIMEOUT", "$DEFAULT_API_KEEP_ALIVE_TIMEOUT"

        minSdkVersion rootProject.hasProperty('minSdkVersion') ? rootProject.minSdkVersion : DEFAULT_MIN_SDK_VERSION
        targetSdkVersion rootProject.hasProperty('targetSdkVersion') ? rootProject.targetSdkVersion : DEFAULT_TARGET_SDK_VERSION
        vectorDrawables.useSupportLibrary = true
    }

    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            unitTests.returnDefaultValues = true
            // Show the result of every unit test, even if it passes.
            all {
                testLogging {
                    events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                }
            }
        }
    }

    sourceSets {
        all {
            it.java.srcDir "src/$it.name/kotlin"
        }
        main.java.srcDirs += 'src/main/kotlinX'
    }

    kotlinOptions {
        jvmTarget = '1.8'
        noStdlib = true
    }
}
dependencies {
    apply from: '../versions.gradle'

    api "com.github.GetStream:stream-chat-android-livedata:$streamLivedataVersion"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "androidx.appcompat:appcompat:$appcompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayoutVersion"
    implementation "androidx.legacy:legacy-support-v4:$legacySupportV4Version"
    implementation "androidx.recyclerview:recyclerview:$recyclerviewVersion"
    implementation "androidx.activity:activity-ktx:$activityKtxVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"

    implementation "androidx.room:room-runtime:$roomRuntimeVersion"
    //annotationProcessor 'androidx.room:room-compiler:2.1.0'

    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"

    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    implementation "com.google.code.gson:gson:$gsonVersion"

    implementation "com.aminography:redirectglide:$glideRedirectVersion"
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    implementation "com.github.duanhong169:drawabletoolbox:$drawabletoolboxVersion"
    implementation "io.noties.markwon:core:$markdownVersion"
    implementation "io.noties.markwon:linkify:$markdownVersion"
    implementation "io.noties.markwon:ext-strikethrough:$markdownVersion"
    implementation "io.noties.markwon:image:$markdownVersion"

    implementation "com.facebook.fresco:fresco:$frescoVersion"
    implementation "me.relex:photodraweeview:$photodraweeviewVersion"
    implementation "net.yslibrary.keyboardvisibilityevent:keyboardvisibilityevent:$keyboardvisibilityeventVersion"
    implementation "com.karumi:dexter:$dexterVersion"

    implementation "com.google.firebase:firebase-messaging:$firebaseMessagingVersion"

    implementation "androidx.media:media:$androidxMediaVersion"
    implementation "io.coil-kt:coil:$coilVersion"

    // ExoPlayer
    api "com.google.android.exoplayer:exoplayer-core:$exoplayerVersion"
    api "com.google.android.exoplayer:exoplayer-dash:$exoplayerVersion"
    api "com.google.android.exoplayer:exoplayer-hls:$exoplayerVersion"
    api "com.google.android.exoplayer:exoplayer-smoothstreaming:$exoplayerVersion"

    // Tests
    testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$jupiterVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiterVersion"

    testImplementation "com.squareup.okhttp3:mockwebserver:$mockwebserverVersion"
    testImplementation "org.mockito:mockito-core:$mockitoCoreVersion"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "org.json:json:$jsonVersion"
    testImplementation "androidx.arch.core:core-testing:$androidxCoreTestVersion"
    testImplementation "org.amshove.kluent:kluent:$kluentVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesTestVersion"

}


task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../docs/")
    exclude '**/utils'
    exclude '**/storage'
    exclude '**/interfaces'
    exclude '**/Command.java'
    exclude '**/Device.java'
    exclude '**/TokenService.java'
    exclude '**/ModelType.java'
    failOnError false
}

task copyJar(type: Copy) {
    description = 'Copying the jar'
    from "$buildDir/intermediates/full_jar/release/createFullJarRelease"
    into file('../attachments')
    include 'full.jar'
}

task copyAar(type: Copy) {
    description = 'Copying the aar'
    from "$buildDir/outputs/aar"
    into file('../attachments')
    include 'library-release.aar'
}

project.afterEvaluate {
    preBuild.dependsOn copyAar
}

clean.dependsOn copyAar
clean.mustRunAfter copyAar
